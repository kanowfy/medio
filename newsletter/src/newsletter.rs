// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.medio.newsletter

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct SubscribeRequest {
    #[serde(default)]
    pub email: String,
}

// Encode SubscribeRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_subscribe_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &SubscribeRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("email")?;
    e.str(&val.email)?;
    Ok(())
}

// Decode SubscribeRequest from cbor input stream
#[doc(hidden)]
pub fn decode_subscribe_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<SubscribeRequest, RpcError> {
    let __result = {
        let mut email: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct SubscribeRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => email = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "email" => email = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        SubscribeRequest {
            email: if let Some(__x) = email {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field SubscribeRequest.email (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct SubscribeResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode SubscribeResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_subscribe_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &SubscribeResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode SubscribeResponse from cbor input stream
#[doc(hidden)]
pub fn decode_subscribe_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<SubscribeResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct SubscribeResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        SubscribeResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field SubscribeResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Description of Newsletter service
/// wasmbus.actorReceive
#[async_trait]
pub trait Newsletter {
    async fn subscribe(
        &self,
        ctx: &Context,
        arg: &SubscribeRequest,
    ) -> RpcResult<SubscribeResponse>;
}

/// NewsletterReceiver receives messages defined in the Newsletter service trait
/// Description of Newsletter service
#[doc(hidden)]
#[async_trait]
pub trait NewsletterReceiver: MessageDispatch + Newsletter {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "Subscribe" => {
                let value: SubscribeRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'SubscribeRequest': {}", e)))?;

                let resp = Newsletter::subscribe(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Newsletter::{}",
                message.method
            ))),
        }
    }
}

/// NewsletterSender sends messages to a Newsletter service
/// Description of Newsletter service
/// client for sending Newsletter messages
#[derive(Clone, Debug)]
pub struct NewsletterSender<T: Transport> {
    transport: T,
}

impl<T: Transport> NewsletterSender<T> {
    /// Constructs a NewsletterSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> NewsletterSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl NewsletterSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Newsletter for NewsletterSender<T> {
    #[allow(unused)]
    async fn subscribe(
        &self,
        ctx: &Context,
        arg: &SubscribeRequest,
    ) -> RpcResult<SubscribeResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Newsletter.Subscribe",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: SubscribeResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': SubscribeResponse", e)))?;
        Ok(value)
    }
}
