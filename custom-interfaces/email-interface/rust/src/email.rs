// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.interfaces.email

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MailConfig {
    pub creds: MailCredentials,
    pub message: MailContent,
    #[serde(default)]
    pub relay: String,
}

// Encode MailConfig as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_mail_config<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MailConfig,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    e.str("creds")?;
    encode_mail_credentials(e, &val.creds)?;
    e.str("message")?;
    encode_mail_content(e, &val.message)?;
    e.str("relay")?;
    e.str(&val.relay)?;
    Ok(())
}

// Decode MailConfig from cbor input stream
#[doc(hidden)]
pub fn decode_mail_config(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<MailConfig, RpcError> {
    let __result = {
        let mut creds: Option<MailCredentials> = None;
        let mut message: Option<MailContent> = None;
        let mut relay: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MailConfig, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        creds = Some(decode_mail_credentials(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#MailCredentials': {}", e)
                        })?)
                    }
                    1 => {
                        message = Some(decode_mail_content(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#MailContent': {}", e)
                        })?)
                    }
                    2 => relay = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "creds" => {
                        creds = Some(decode_mail_credentials(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#MailCredentials': {}", e)
                        })?)
                    }
                    "message" => {
                        message = Some(decode_mail_content(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#MailContent': {}", e)
                        })?)
                    }
                    "relay" => relay = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        MailConfig {
            creds: if let Some(__x) = creds {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailConfig.creds (#0)".to_string(),
                ));
            },

            message: if let Some(__x) = message {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailConfig.message (#1)".to_string(),
                ));
            },

            relay: if let Some(__x) = relay {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailConfig.relay (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MailContent {
    #[serde(default)]
    pub body: String,
    #[serde(default)]
    pub from: String,
    #[serde(rename = "isHtml")]
    #[serde(default)]
    pub is_html: bool,
    #[serde(default)]
    pub subject: String,
    pub to: RecipientList,
}

// Encode MailContent as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_mail_content<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MailContent,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    e.str("body")?;
    e.str(&val.body)?;
    e.str("from")?;
    e.str(&val.from)?;
    e.str("isHtml")?;
    e.bool(val.is_html)?;
    e.str("subject")?;
    e.str(&val.subject)?;
    e.str("to")?;
    encode_recipient_list(e, &val.to)?;
    Ok(())
}

// Decode MailContent from cbor input stream
#[doc(hidden)]
pub fn decode_mail_content(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MailContent, RpcError> {
    let __result = {
        let mut body: Option<String> = None;
        let mut from: Option<String> = None;
        let mut is_html: Option<bool> = None;
        let mut subject: Option<String> = None;
        let mut to: Option<RecipientList> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MailContent, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => body = Some(d.str()?.to_string()),
                    1 => from = Some(d.str()?.to_string()),
                    2 => is_html = Some(d.bool()?),
                    3 => subject = Some(d.str()?.to_string()),
                    4 => {
                        to = Some(decode_recipient_list(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#RecipientList': {}", e)
                        })?)
                    }
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "body" => body = Some(d.str()?.to_string()),
                    "from" => from = Some(d.str()?.to_string()),
                    "isHtml" => is_html = Some(d.bool()?),
                    "subject" => subject = Some(d.str()?.to_string()),
                    "to" => {
                        to = Some(decode_recipient_list(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.email#RecipientList': {}", e)
                        })?)
                    }
                    _ => d.skip()?,
                }
            }
        }
        MailContent {
            body: if let Some(__x) = body {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailContent.body (#0)".to_string(),
                ));
            },

            from: if let Some(__x) = from {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailContent.from (#1)".to_string(),
                ));
            },

            is_html: if let Some(__x) = is_html {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailContent.is_html (#2)".to_string(),
                ));
            },

            subject: if let Some(__x) = subject {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailContent.subject (#3)".to_string(),
                ));
            },

            to: if let Some(__x) = to {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailContent.to (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MailCredentials {
    #[serde(default)]
    pub password: String,
    #[serde(default)]
    pub username: String,
}

// Encode MailCredentials as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_mail_credentials<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MailCredentials,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("password")?;
    e.str(&val.password)?;
    e.str("username")?;
    e.str(&val.username)?;
    Ok(())
}

// Decode MailCredentials from cbor input stream
#[doc(hidden)]
pub fn decode_mail_credentials(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MailCredentials, RpcError> {
    let __result = {
        let mut password: Option<String> = None;
        let mut username: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MailCredentials, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => password = Some(d.str()?.to_string()),
                    1 => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "password" => password = Some(d.str()?.to_string()),
                    "username" => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        MailCredentials {
            password: if let Some(__x) = password {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailCredentials.password (#0)".to_string(),
                ));
            },

            username: if let Some(__x) = username {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailCredentials.username (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MailResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode MailResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_mail_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MailResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode MailResult from cbor input stream
#[doc(hidden)]
pub fn decode_mail_result(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<MailResult, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MailResult, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        MailResult {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MailResult.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
pub type RecipientList = Vec<String>;

// Encode RecipientList as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_recipient_list<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RecipientList,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        e.str(item)?;
    }
    Ok(())
}

// Decode RecipientList from cbor input stream
#[doc(hidden)]
pub fn decode_recipient_list(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RecipientList, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<String> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(d.str()?.to_string())
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<String> = Vec::new();
            loop {
                match d.datatype() {
                    Err(_) => break,
                    Ok(wasmbus_rpc::cbor::Type::Break) => break,
                    Ok(_) => arr.push(d.str()?.to_string()),
                }
            }
            arr
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: medio:interfaces:email
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait Email {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "medio:interfaces:email"
    }
    async fn send(&self, ctx: &Context, arg: &MailConfig) -> RpcResult<MailResult>;
}

/// EmailReceiver receives messages defined in the Email service trait
#[doc(hidden)]
#[async_trait]
pub trait EmailReceiver: MessageDispatch + Email {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "Send" => {
                let value: MailConfig = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'MailConfig': {}", e)))?;

                let resp = Email::send(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Email::{}",
                message.method
            ))),
        }
    }
}

/// EmailSender sends messages to a Email service
/// client for sending Email messages
#[derive(Clone, Debug)]
pub struct EmailSender<T: Transport> {
    transport: T,
}

impl<T: Transport> EmailSender<T> {
    /// Constructs a EmailSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> EmailSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl EmailSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl EmailSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Email provider
    /// implementing the 'medio:interfaces:email' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("medio:interfaces:email", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Email provider
    /// implementing the 'medio:interfaces:email' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "medio:interfaces:email",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Email for EmailSender<T> {
    #[allow(unused)]
    async fn send(&self, ctx: &Context, arg: &MailConfig) -> RpcResult<MailResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Email.Send",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: MailResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': MailResult", e)))?;
        Ok(value)
    }
}
