// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.interfaces.password

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct HashPayload {
    #[serde(default)]
    pub plain: String,
}

// Encode HashPayload as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_hash_payload<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &HashPayload,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("plain")?;
    e.str(&val.plain)?;
    Ok(())
}

// Decode HashPayload from cbor input stream
#[doc(hidden)]
pub fn decode_hash_payload(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<HashPayload, RpcError> {
    let __result = {
        let mut plain: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct HashPayload, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => plain = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "plain" => plain = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        HashPayload {
            plain: if let Some(__x) = plain {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field HashPayload.plain (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct VerifyPayload {
    #[serde(default)]
    pub hashed: String,
    #[serde(default)]
    pub plain: String,
}

// Encode VerifyPayload as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_verify_payload<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &VerifyPayload,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("hashed")?;
    e.str(&val.hashed)?;
    e.str("plain")?;
    e.str(&val.plain)?;
    Ok(())
}

// Decode VerifyPayload from cbor input stream
#[doc(hidden)]
pub fn decode_verify_payload(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<VerifyPayload, RpcError> {
    let __result = {
        let mut hashed: Option<String> = None;
        let mut plain: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct VerifyPayload, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => hashed = Some(d.str()?.to_string()),
                    1 => plain = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "hashed" => hashed = Some(d.str()?.to_string()),
                    "plain" => plain = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        VerifyPayload {
            hashed: if let Some(__x) = hashed {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field VerifyPayload.hashed (#0)".to_string(),
                ));
            },

            plain: if let Some(__x) = plain {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field VerifyPayload.plain (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: medio:interfaces:password
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait Password {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "medio:interfaces:password"
    }
    async fn hash_password(&self, ctx: &Context, arg: &HashPayload) -> RpcResult<String>;
    async fn verify_password(&self, ctx: &Context, arg: &VerifyPayload) -> RpcResult<bool>;
}

/// PasswordReceiver receives messages defined in the Password service trait
#[doc(hidden)]
#[async_trait]
pub trait PasswordReceiver: MessageDispatch + Password {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "HashPassword" => {
                let value: HashPayload = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'HashPayload': {}", e)))?;

                let resp = Password::hash_password(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "VerifyPassword" => {
                let value: VerifyPayload = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'VerifyPayload': {}", e)))?;

                let resp = Password::verify_password(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Password::{}",
                message.method
            ))),
        }
    }
}

/// PasswordSender sends messages to a Password service
/// client for sending Password messages
#[derive(Clone, Debug)]
pub struct PasswordSender<T: Transport> {
    transport: T,
}

impl<T: Transport> PasswordSender<T> {
    /// Constructs a PasswordSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> PasswordSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl PasswordSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl PasswordSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Password provider
    /// implementing the 'medio:interfaces:password' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "medio:interfaces:password",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Password provider
    /// implementing the 'medio:interfaces:password' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "medio:interfaces:password",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Password for PasswordSender<T> {
    #[allow(unused)]
    async fn hash_password(&self, ctx: &Context, arg: &HashPayload) -> RpcResult<String> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Password.HashPassword",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: String = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': String", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn verify_password(&self, ctx: &Context, arg: &VerifyPayload) -> RpcResult<bool> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Password.VerifyPassword",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: bool = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': Boolean", e)))?;
        Ok(value)
    }
}
