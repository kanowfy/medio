// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.interfaces.authtoken

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Claims {
    #[serde(default)]
    pub expires: u64,
    #[serde(default)]
    pub uid: u64,
}

// Encode Claims as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_claims<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Claims,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("expires")?;
    e.u64(val.expires)?;
    e.str("uid")?;
    e.u64(val.uid)?;
    Ok(())
}

// Decode Claims from cbor input stream
#[doc(hidden)]
pub fn decode_claims(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Claims, RpcError> {
    let __result = {
        let mut expires: Option<u64> = None;
        let mut uid: Option<u64> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Claims, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => expires = Some(d.u64()?),
                    1 => uid = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "expires" => expires = Some(d.u64()?),
                    "uid" => uid = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        }
        Claims {
            expires: if let Some(__x) = expires {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Claims.expires (#0)".to_string(),
                ));
            },

            uid: if let Some(__x) = uid {
                __x
            } else {
                return Err(RpcError::Deser("missing field Claims.uid (#1)".to_string()));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct TokenConfig {
    pub claims: Claims,
    #[serde(default)]
    pub secret: String,
}

// Encode TokenConfig as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_token_config<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &TokenConfig,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("claims")?;
    encode_claims(e, &val.claims)?;
    e.str("secret")?;
    e.str(&val.secret)?;
    Ok(())
}

// Decode TokenConfig from cbor input stream
#[doc(hidden)]
pub fn decode_token_config(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<TokenConfig, RpcError> {
    let __result = {
        let mut claims: Option<Claims> = None;
        let mut secret: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct TokenConfig, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        claims = Some(decode_claims(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.authtoken#Claims': {}", e)
                        })?)
                    }
                    1 => secret = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "claims" => {
                        claims = Some(decode_claims(d).map_err(|e| {
                            format!("decoding 'org.kny.interfaces.authtoken#Claims': {}", e)
                        })?)
                    }
                    "secret" => secret = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        TokenConfig {
            claims: if let Some(__x) = claims {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field TokenConfig.claims (#0)".to_string(),
                ));
            },

            secret: if let Some(__x) = secret {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field TokenConfig.secret (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct VerifyTokenRequest {
    #[serde(default)]
    pub secret: String,
    #[serde(default)]
    pub token: String,
}

// Encode VerifyTokenRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_verify_token_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &VerifyTokenRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("secret")?;
    e.str(&val.secret)?;
    e.str("token")?;
    e.str(&val.token)?;
    Ok(())
}

// Decode VerifyTokenRequest from cbor input stream
#[doc(hidden)]
pub fn decode_verify_token_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<VerifyTokenRequest, RpcError> {
    let __result = {
        let mut secret: Option<String> = None;
        let mut token: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct VerifyTokenRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => secret = Some(d.str()?.to_string()),
                    1 => token = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "secret" => secret = Some(d.str()?.to_string()),
                    "token" => token = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        VerifyTokenRequest {
            secret: if let Some(__x) = secret {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field VerifyTokenRequest.secret (#0)".to_string(),
                ));
            },

            token: if let Some(__x) = token {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field VerifyTokenRequest.token (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct VerifyTokenResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<u64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode VerifyTokenResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_verify_token_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &VerifyTokenResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.id.as_ref() {
        e.str("id")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode VerifyTokenResponse from cbor input stream
#[doc(hidden)]
pub fn decode_verify_token_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<VerifyTokenResponse, RpcError> {
    let __result = {
        let mut id: Option<Option<u64>> = Some(None);
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct VerifyTokenResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    1 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "id" => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        VerifyTokenResponse {
            id: id.unwrap(),
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field VerifyTokenResponse.success (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: medio:interfaces:authtoken
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait Authtoken {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "medio:interfaces:authtoken"
    }
    async fn create_token(&self, ctx: &Context, arg: &TokenConfig) -> RpcResult<String>;
    async fn verify_token(
        &self,
        ctx: &Context,
        arg: &VerifyTokenRequest,
    ) -> RpcResult<VerifyTokenResponse>;
}

/// AuthtokenReceiver receives messages defined in the Authtoken service trait
#[doc(hidden)]
#[async_trait]
pub trait AuthtokenReceiver: MessageDispatch + Authtoken {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "CreateToken" => {
                let value: TokenConfig = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'TokenConfig': {}", e)))?;

                let resp = Authtoken::create_token(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "VerifyToken" => {
                let value: VerifyTokenRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'VerifyTokenRequest': {}", e)))?;

                let resp = Authtoken::verify_token(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Authtoken::{}",
                message.method
            ))),
        }
    }
}

/// AuthtokenSender sends messages to a Authtoken service
/// client for sending Authtoken messages
#[derive(Clone, Debug)]
pub struct AuthtokenSender<T: Transport> {
    transport: T,
}

impl<T: Transport> AuthtokenSender<T> {
    /// Constructs a AuthtokenSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> AuthtokenSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl AuthtokenSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl AuthtokenSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Authtoken provider
    /// implementing the 'medio:interfaces:authtoken' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "medio:interfaces:authtoken",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Authtoken provider
    /// implementing the 'medio:interfaces:authtoken' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "medio:interfaces:authtoken",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Authtoken for AuthtokenSender<T> {
    #[allow(unused)]
    async fn create_token(&self, ctx: &Context, arg: &TokenConfig) -> RpcResult<String> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Authtoken.CreateToken",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: String = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': String", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn verify_token(
        &self,
        ctx: &Context,
        arg: &VerifyTokenRequest,
    ) -> RpcResult<VerifyTokenResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Authtoken.VerifyToken",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: VerifyTokenResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': VerifyTokenResponse", e)))?;
        Ok(value)
    }
}
