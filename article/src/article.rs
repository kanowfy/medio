// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.medio.article

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct ArticleDto {
    #[serde(rename = "authorId")]
    #[serde(default)]
    pub author_id: u64,
    #[serde(default)]
    pub content: String,
    /// Time is represented using UNIX Timestamp, a.k.a number of seconds passed since epoch
    #[serde(rename = "createdAt")]
    #[serde(default)]
    pub created_at: u64,
    #[serde(default)]
    pub id: u64,
    #[serde(default)]
    pub title: String,
    #[serde(rename = "updatedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<u64>,
}

// Encode ArticleDto as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_article_dto<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &ArticleDto,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(6)?;
    e.str("authorId")?;
    e.u64(val.author_id)?;
    e.str("content")?;
    e.str(&val.content)?;
    e.str("createdAt")?;
    e.u64(val.created_at)?;
    e.str("id")?;
    e.u64(val.id)?;
    e.str("title")?;
    e.str(&val.title)?;
    if let Some(val) = val.updated_at.as_ref() {
        e.str("updatedAt")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode ArticleDto from cbor input stream
#[doc(hidden)]
pub fn decode_article_dto(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<ArticleDto, RpcError> {
    let __result = {
        let mut author_id: Option<u64> = None;
        let mut content: Option<String> = None;
        let mut created_at: Option<u64> = None;
        let mut id: Option<u64> = None;
        let mut title: Option<String> = None;
        let mut updated_at: Option<Option<u64>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct ArticleDto, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => author_id = Some(d.u64()?),
                    1 => content = Some(d.str()?.to_string()),
                    2 => created_at = Some(d.u64()?),
                    3 => id = Some(d.u64()?),
                    4 => title = Some(d.str()?.to_string()),
                    5 => {
                        updated_at = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "authorId" => author_id = Some(d.u64()?),
                    "content" => content = Some(d.str()?.to_string()),
                    "createdAt" => created_at = Some(d.u64()?),
                    "id" => id = Some(d.u64()?),
                    "title" => title = Some(d.str()?.to_string()),
                    "updatedAt" => {
                        updated_at = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        ArticleDto {
            author_id: if let Some(__x) = author_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ArticleDto.author_id (#0)".to_string(),
                ));
            },

            content: if let Some(__x) = content {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ArticleDto.content (#1)".to_string(),
                ));
            },

            created_at: if let Some(__x) = created_at {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ArticleDto.created_at (#2)".to_string(),
                ));
            },

            id: if let Some(__x) = id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ArticleDto.id (#3)".to_string(),
                ));
            },

            title: if let Some(__x) = title {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ArticleDto.title (#4)".to_string(),
                ));
            },
            updated_at: updated_at.unwrap(),
        }
    };
    Ok(__result)
}
pub type ArticleList = Vec<ArticleDto>;

// Encode ArticleList as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_article_list<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &ArticleList,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        encode_article_dto(e, item)?;
    }
    Ok(())
}

// Decode ArticleList from cbor input stream
#[doc(hidden)]
pub fn decode_article_list(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<ArticleList, RpcError> {
    let __result =
        {
            if let Some(n) = d.array()? {
                let mut arr: Vec<ArticleDto> = Vec::with_capacity(n as usize);
                for _ in 0..(n as usize) {
                    arr.push(decode_article_dto(d).map_err(|e| {
                        format!("decoding 'org.kny.medio.article#ArticleDto': {}", e)
                    })?)
                }
                arr
            } else {
                // indefinite array
                let mut arr: Vec<ArticleDto> = Vec::new();
                loop {
                    match d.datatype() {
                        Err(_) => break,
                        Ok(wasmbus_rpc::cbor::Type::Break) => break,
                        Ok(_) => arr.push(decode_article_dto(d).map_err(|e| {
                            format!("decoding 'org.kny.medio.article#ArticleDto': {}", e)
                        })?),
                    }
                }
                arr
            }
        };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateArticleRequest {
    #[serde(rename = "authorId")]
    #[serde(default)]
    pub author_id: u64,
    #[serde(default)]
    pub content: String,
    #[serde(default)]
    pub title: String,
}

// Encode CreateArticleRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_article_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateArticleRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    e.str("authorId")?;
    e.u64(val.author_id)?;
    e.str("content")?;
    e.str(&val.content)?;
    e.str("title")?;
    e.str(&val.title)?;
    Ok(())
}

// Decode CreateArticleRequest from cbor input stream
#[doc(hidden)]
pub fn decode_create_article_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateArticleRequest, RpcError> {
    let __result = {
        let mut author_id: Option<u64> = None;
        let mut content: Option<String> = None;
        let mut title: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateArticleRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => author_id = Some(d.u64()?),
                    1 => content = Some(d.str()?.to_string()),
                    2 => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "authorId" => author_id = Some(d.u64()?),
                    "content" => content = Some(d.str()?.to_string()),
                    "title" => title = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        CreateArticleRequest {
            author_id: if let Some(__x) = author_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateArticleRequest.author_id (#0)".to_string(),
                ));
            },

            content: if let Some(__x) = content {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateArticleRequest.content (#1)".to_string(),
                ));
            },

            title: if let Some(__x) = title {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateArticleRequest.title (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct CreateArticleResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<u64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode CreateArticleResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_create_article_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &CreateArticleResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.id.as_ref() {
        e.str("id")?;
        e.u64(*val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode CreateArticleResponse from cbor input stream
#[doc(hidden)]
pub fn decode_create_article_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<CreateArticleResponse, RpcError> {
    let __result = {
        let mut id: Option<Option<u64>> = Some(None);
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct CreateArticleResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    1 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "id" => {
                        id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u64()?))
                        }
                    }
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        CreateArticleResponse {
            id: id.unwrap(),
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field CreateArticleResponse.success (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct DeleteArticleResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode DeleteArticleResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_delete_article_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &DeleteArticleResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode DeleteArticleResponse from cbor input stream
#[doc(hidden)]
pub fn decode_delete_article_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<DeleteArticleResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct DeleteArticleResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        DeleteArticleResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field DeleteArticleResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetOneArticleResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub article: Option<ArticleDto>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode GetOneArticleResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_one_article_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetOneArticleResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.article.as_ref() {
        e.str("article")?;
        encode_article_dto(e, val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode GetOneArticleResponse from cbor input stream
#[doc(hidden)]
pub fn decode_get_one_article_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetOneArticleResponse, RpcError> {
    let __result = {
        let mut article: Option<Option<ArticleDto>> = Some(None);
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct GetOneArticleResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        article = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_article_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.article#ArticleDto': {}", e)
                            })?))
                        }
                    }
                    1 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "article" => {
                        article = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_article_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.article#ArticleDto': {}", e)
                            })?))
                        }
                    }
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        GetOneArticleResponse {
            article: article.unwrap(),
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetOneArticleResponse.success (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UpdateArticleRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "targetId")]
    #[serde(default)]
    pub target_id: u64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

// Encode UpdateArticleRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_update_article_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UpdateArticleRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.content.as_ref() {
        e.str("content")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("targetId")?;
    e.u64(val.target_id)?;
    if let Some(val) = val.title.as_ref() {
        e.str("title")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode UpdateArticleRequest from cbor input stream
#[doc(hidden)]
pub fn decode_update_article_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UpdateArticleRequest, RpcError> {
    let __result = {
        let mut content: Option<Option<String>> = Some(None);
        let mut target_id: Option<u64> = None;
        let mut title: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UpdateArticleRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        content = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => target_id = Some(d.u64()?),
                    2 => {
                        title = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "content" => {
                        content = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "targetId" => target_id = Some(d.u64()?),
                    "title" => {
                        title = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        UpdateArticleRequest {
            content: content.unwrap(),

            target_id: if let Some(__x) = target_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UpdateArticleRequest.target_id (#1)".to_string(),
                ));
            },
            title: title.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UpdateArticleResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode UpdateArticleResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_update_article_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UpdateArticleResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode UpdateArticleResponse from cbor input stream
#[doc(hidden)]
pub fn decode_update_article_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<UpdateArticleResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UpdateArticleResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        UpdateArticleResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UpdateArticleResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// wasmbus.actorReceive
#[async_trait]
pub trait Article {
    async fn get_all_articles(&self, ctx: &Context) -> RpcResult<ArticleList>;
    async fn get_articles_for_author(&self, ctx: &Context, arg: &u64) -> RpcResult<ArticleList>;
    async fn get_one_article(&self, ctx: &Context, arg: &u64) -> RpcResult<GetOneArticleResponse>;
    async fn create_article(
        &self,
        ctx: &Context,
        arg: &CreateArticleRequest,
    ) -> RpcResult<CreateArticleResponse>;
    async fn update_article(
        &self,
        ctx: &Context,
        arg: &UpdateArticleRequest,
    ) -> RpcResult<UpdateArticleResponse>;
    async fn delete_article(&self, ctx: &Context, arg: &u64) -> RpcResult<DeleteArticleResponse>;
}

/// ArticleReceiver receives messages defined in the Article service trait
#[doc(hidden)]
#[async_trait]
pub trait ArticleReceiver: MessageDispatch + Article {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "GetAllArticles" => {
                let resp = Article::get_all_articles(self, ctx).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetArticlesForAuthor" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = Article::get_articles_for_author(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetOneArticle" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = Article::get_one_article(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "CreateArticle" => {
                let value: CreateArticleRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'CreateArticleRequest': {}", e)))?;

                let resp = Article::create_article(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "UpdateArticle" => {
                let value: UpdateArticleRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'UpdateArticleRequest': {}", e)))?;

                let resp = Article::update_article(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "DeleteArticle" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = Article::delete_article(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Article::{}",
                message.method
            ))),
        }
    }
}

/// ArticleSender sends messages to a Article service
/// client for sending Article messages
#[derive(Clone, Debug)]
pub struct ArticleSender<T: Transport> {
    transport: T,
}

impl<T: Transport> ArticleSender<T> {
    /// Constructs a ArticleSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> ArticleSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl ArticleSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Article for ArticleSender<T> {
    #[allow(unused)]
    async fn get_all_articles(&self, ctx: &Context) -> RpcResult<ArticleList> {
        let buf = *b"";
        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.GetAllArticles",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: ArticleList = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': ArticleList", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_articles_for_author(&self, ctx: &Context, arg: &u64) -> RpcResult<ArticleList> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.GetArticlesForAuthor",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: ArticleList = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': ArticleList", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_one_article(&self, ctx: &Context, arg: &u64) -> RpcResult<GetOneArticleResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.GetOneArticle",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: GetOneArticleResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': GetOneArticleResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn create_article(
        &self,
        ctx: &Context,
        arg: &CreateArticleRequest,
    ) -> RpcResult<CreateArticleResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.CreateArticle",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: CreateArticleResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': CreateArticleResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn update_article(
        &self,
        ctx: &Context,
        arg: &UpdateArticleRequest,
    ) -> RpcResult<UpdateArticleResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.UpdateArticle",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: UpdateArticleResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': UpdateArticleResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn delete_article(&self, ctx: &Context, arg: &u64) -> RpcResult<DeleteArticleResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Article.DeleteArticle",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: DeleteArticleResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': DeleteArticleResponse", e)))?;
        Ok(value)
    }
}
