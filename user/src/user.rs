// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.kny.medio.user

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetUserResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserDto>,
}

// Encode GetUserResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_user_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetUserResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    if let Some(val) = val.user.as_ref() {
        e.str("user")?;
        encode_user_dto(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode GetUserResponse from cbor input stream
#[doc(hidden)]
pub fn decode_get_user_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetUserResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;
        let mut user: Option<Option<UserDto>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct GetUserResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    2 => {
                        user = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_user_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.user#UserDto': {}", e)
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    "user" => {
                        user = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_user_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.user#UserDto': {}", e)
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        GetUserResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetUserResponse.success (#1)".to_string(),
                ));
            },
            user: user.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct LoginRequest {
    #[serde(default)]
    pub password: String,
    #[serde(default)]
    pub username: String,
}

// Encode LoginRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_login_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &LoginRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    e.str("password")?;
    e.str(&val.password)?;
    e.str("username")?;
    e.str(&val.username)?;
    Ok(())
}

// Decode LoginRequest from cbor input stream
#[doc(hidden)]
pub fn decode_login_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<LoginRequest, RpcError> {
    let __result = {
        let mut password: Option<String> = None;
        let mut username: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct LoginRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => password = Some(d.str()?.to_string()),
                    1 => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "password" => password = Some(d.str()?.to_string()),
                    "username" => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        LoginRequest {
            password: if let Some(__x) = password {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field LoginRequest.password (#0)".to_string(),
                ));
            },

            username: if let Some(__x) = username {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field LoginRequest.username (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct LoginResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
    /// JWT Token containing user id if successful
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserDto>,
}

// Encode LoginResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_login_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &LoginResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    if let Some(val) = val.token.as_ref() {
        e.str("token")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.user.as_ref() {
        e.str("user")?;
        encode_user_dto(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode LoginResponse from cbor input stream
#[doc(hidden)]
pub fn decode_login_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<LoginResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;
        let mut token: Option<Option<String>> = Some(None);
        let mut user: Option<Option<UserDto>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct LoginResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    2 => {
                        token = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    3 => {
                        user = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_user_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.user#UserDto': {}", e)
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    "token" => {
                        token = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "user" => {
                        user = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_user_dto(d).map_err(|e| {
                                format!("decoding 'org.kny.medio.user#UserDto': {}", e)
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        LoginResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field LoginResponse.success (#1)".to_string(),
                ));
            },
            token: token.unwrap(),
            user: user.unwrap(),
        }
    };
    Ok(__result)
}
/// operation UpdateUser {
/// input: UpdateUserRequest,
/// output: UpdateUserResponse
/// }
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RegisterRequest {
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(default)]
    pub email: String,
    #[serde(default)]
    pub password: String,
    #[serde(default)]
    pub username: String,
}

// Encode RegisterRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_register_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RegisterRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.display_name.as_ref() {
        e.str("displayName")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("email")?;
    e.str(&val.email)?;
    e.str("password")?;
    e.str(&val.password)?;
    e.str("username")?;
    e.str(&val.username)?;
    Ok(())
}

// Decode RegisterRequest from cbor input stream
#[doc(hidden)]
pub fn decode_register_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RegisterRequest, RpcError> {
    let __result = {
        let mut display_name: Option<Option<String>> = Some(None);
        let mut email: Option<String> = None;
        let mut password: Option<String> = None;
        let mut username: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RegisterRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        display_name = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => email = Some(d.str()?.to_string()),
                    2 => password = Some(d.str()?.to_string()),
                    3 => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "displayName" => {
                        display_name = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "email" => email = Some(d.str()?.to_string()),
                    "password" => password = Some(d.str()?.to_string()),
                    "username" => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        RegisterRequest {
            display_name: display_name.unwrap(),

            email: if let Some(__x) = email {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RegisterRequest.email (#1)".to_string(),
                ));
            },

            password: if let Some(__x) = password {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RegisterRequest.password (#2)".to_string(),
                ));
            },

            username: if let Some(__x) = username {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RegisterRequest.username (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RegisterResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode RegisterResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_register_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RegisterResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode RegisterResponse from cbor input stream
#[doc(hidden)]
pub fn decode_register_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RegisterResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RegisterResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        RegisterResponse {
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RegisterResponse.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct UserDto {
    #[serde(rename = "createdAt")]
    #[serde(default)]
    pub created_at: u64,
    #[serde(rename = "displayName")]
    #[serde(default)]
    pub display_name: String,
    /// Do we need password here?
    #[serde(default)]
    pub email: String,
    #[serde(default)]
    pub id: u64,
    #[serde(default)]
    pub username: String,
}

// Encode UserDto as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_user_dto<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &UserDto,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    e.str("createdAt")?;
    e.u64(val.created_at)?;
    e.str("displayName")?;
    e.str(&val.display_name)?;
    e.str("email")?;
    e.str(&val.email)?;
    e.str("id")?;
    e.u64(val.id)?;
    e.str("username")?;
    e.str(&val.username)?;
    Ok(())
}

// Decode UserDto from cbor input stream
#[doc(hidden)]
pub fn decode_user_dto(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<UserDto, RpcError> {
    let __result = {
        let mut created_at: Option<u64> = None;
        let mut display_name: Option<String> = None;
        let mut email: Option<String> = None;
        let mut id: Option<u64> = None;
        let mut username: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct UserDto, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => created_at = Some(d.u64()?),
                    1 => display_name = Some(d.str()?.to_string()),
                    2 => email = Some(d.str()?.to_string()),
                    3 => id = Some(d.u64()?),
                    4 => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "createdAt" => created_at = Some(d.u64()?),
                    "displayName" => display_name = Some(d.str()?.to_string()),
                    "email" => email = Some(d.str()?.to_string()),
                    "id" => id = Some(d.u64()?),
                    "username" => username = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        UserDto {
            created_at: if let Some(__x) = created_at {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UserDto.created_at (#0)".to_string(),
                ));
            },

            display_name: if let Some(__x) = display_name {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UserDto.display_name (#1)".to_string(),
                ));
            },

            email: if let Some(__x) = email {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UserDto.email (#2)".to_string(),
                ));
            },

            id: if let Some(__x) = id {
                __x
            } else {
                return Err(RpcError::Deser("missing field UserDto.id (#3)".to_string()));
            },

            username: if let Some(__x) = username {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field UserDto.username (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Description of Article service
/// wasmbus.actorReceive
#[async_trait]
pub trait User {
    async fn register(&self, ctx: &Context, arg: &RegisterRequest) -> RpcResult<RegisterResponse>;
    async fn login(&self, ctx: &Context, arg: &LoginRequest) -> RpcResult<LoginResponse>;
    async fn get_user(&self, ctx: &Context, arg: &u64) -> RpcResult<GetUserResponse>;
}

/// UserReceiver receives messages defined in the User service trait
/// Description of Article service
#[doc(hidden)]
#[async_trait]
pub trait UserReceiver: MessageDispatch + User {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "Register" => {
                let value: RegisterRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'RegisterRequest': {}", e)))?;

                let resp = User::register(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "Login" => {
                let value: LoginRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'LoginRequest': {}", e)))?;

                let resp = User::login(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetUser" => {
                let value: u64 = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'U64': {}", e)))?;

                let resp = User::get_user(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "User::{}",
                message.method
            ))),
        }
    }
}

/// UserSender sends messages to a User service
/// Description of Article service
/// client for sending User messages
#[derive(Clone, Debug)]
pub struct UserSender<T: Transport> {
    transport: T,
}

impl<T: Transport> UserSender<T> {
    /// Constructs a UserSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> UserSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl UserSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> User for UserSender<T> {
    #[allow(unused)]
    async fn register(&self, ctx: &Context, arg: &RegisterRequest) -> RpcResult<RegisterResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "User.Register",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: RegisterResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': RegisterResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn login(&self, ctx: &Context, arg: &LoginRequest) -> RpcResult<LoginResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "User.Login",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: LoginResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': LoginResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_user(&self, ctx: &Context, arg: &u64) -> RpcResult<GetUserResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "User.GetUser",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: GetUserResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': GetUserResponse", e)))?;
        Ok(value)
    }
}
